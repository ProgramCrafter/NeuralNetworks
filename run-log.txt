<__main__.NeuralNetwork object at 0x000001FEAF913760> <data_source.CFProblemTimingsDataSource object at 0x000001FEAF913D60>
Epoch      0 - square distance = 0.0323 (delta = -0.0000)

Results:
#    0: 1900 vs 1379     #    1: 800 vs 1282     #    2: 1500 vs 857     #    3: 800 vs 1036
#    4: 800 vs 1911      #    5: 1800 vs 1337    #    6: 800 vs 1233     #    7: 800 vs 857
#    8: 800 vs 1036      #    9: 800 vs 1233     #   10: 800 vs 1245     #   11: 1200 vs 1987
#   12: 900 vs 1329      #   13: 800 vs 1036     #   14: 800 vs 1036     #   15: 800 vs 1036
#   16: 800 vs 1491      #   17: 1300 vs 1036    #   18: 800 vs 1036     #   19: 800 vs 862
#   20: 800 vs 1762      #   21: 1400 vs 1036    #   22: 800 vs 1036     #   23: 900 vs 1461
#   24: 800 vs 1836      #   25: 1500 vs 1467    #   26: 1000 vs 1036    #   27: 1100 vs 870
#   28: 2100 vs 2017     #   29: 800 vs 1036     #   30: 1300 vs 1036    #   31: 800 vs 862
#   32: 1100 vs 1485     #   33: 800 vs 1243     #   34: 800 vs 1036     #   35: 800 vs 1060
#   36: 1900 vs 2300     #   37: 800 vs 1350     #   38: 1200 vs 1947    #   39: 800 vs 1467
#   40: 1500 vs 1041     #   41: 800 vs 800      #   42: 900 vs 1233     #   43: 1400 vs 1036
#   44: 1000 vs 2220     #   45: 900 vs 1233     #   46: 800 vs 1036     #   47: 800 vs 1467
#   48: 2000 vs 2445     #   49: 1200 vs 1103    #   50: 2800 vs 2265    #   51: 800 vs 1421
#   52: 3200 vs 1699     #   53: 2400 vs 1036    #   54: 1900 vs 1606    #   55: 1200 vs 1036
#   56: 800 vs 1414      #   57: 900 vs 1637     #   58: 800 vs 1036     #   59: 800 vs 1052
#   60: 800 vs 1060      #   61: 1300 vs 1858    #   62: 800 vs 1036     #   63: 1200 vs 1036
#   64: 800 vs 1036      #   65: 800 vs 1047     #   66: 1500 vs 1047    #   67: 900 vs 1047
#   68: 1000 vs 1115     #   69: 1200 vs 1879    #   70: 800 vs 1095     #   71: 1200 vs 1275
#   72: 800 vs 1036      #   73: 1300 vs 1233    #   74: 1400 vs 1527    #   75: 800 vs 1036
#   76: 1000 vs 1661     #   77: 1200 vs 1502    #   78: 1200 vs 1265    #   79: 800 vs 1036
#   80: 1200 vs 1265     #   81: 900 vs 1036     #   82: 900 vs 1233     #   83: 1400 vs 1036
#   84: 800 vs 800       #   85: 900 vs 1931     #   86: 800 vs 1085     #   87: 1000 vs 1036
#   88: 800 vs 1731      #   89: 800 vs 800      #   90: 1700 vs 1895    #   91: 800 vs 1036
#   92: 1000 vs 1036     #   93: 1200 vs 1455    #   94: 800 vs 1233     #   95: 800 vs 1036
#   96: 1000 vs 1313     #   97: 2100 vs 2444    #   98: 800 vs 1052     #   99: 800 vs 1217
#  100: 3000 vs 2552     #  101: 3200 vs 1964    #  102: 1700 vs 1510    #  103: 2800 vs 2039
#  104: 2000 vs 2088     #  105: 2700 vs 2138    #  106: 1100 vs 1441    #  107: 800 vs 1060
#  108: 800 vs 800       #  109: 2700 vs 2274    #  110: 2100 vs 1329    #  111: 1600 vs 1313
#  112: 1200 vs 1313     #  113: 1000 vs 1313    #  114: 800 vs 800      #  115: 3000 vs 2037
#  116: 2900 vs 2344     #  117: 1300 vs 1677    #  118: 2400 vs 1243    #  119: 2100 vs 2192
#  120: 2300 vs 1609     #  121: 2500 vs 2522    #  122: 2700 vs 1344    #  123: 1600 vs 1243
#  124: 1700 vs 1056     #  125: 800 vs 1036     #  126: 800 vs 1036     #  127: 3200 vs 2498
#  128: 2200 vs 1694     #  129: 2600 vs 1527    #  130: 1900 vs 1469    #  131: 1200 vs 1403
#  132: 1100 vs 1522     #  133: 800 vs 1284     #  134: 2700 vs 2416    #  135: 2700 vs 2268
#  136: 2700 vs 2268     #  137: 3500 vs 2138    #  138: 3300 vs 1973    #  139: 2000 vs 1078
#  140: 2200 vs 2350     #  141: 2700 vs 2335    #  142: 1200 vs 1313    #  143: 2400 vs 2336
#  144: 2000 vs 2284     #  145: 1300 vs 1441    #  146: 1100 vs 1485    #  147: 800 vs 1350
#  148: 3500 vs 2514     #  149: 3000 vs 1706    #  150: 2500 vs 2106    #  151: 2100 vs 2315
#  152: 1800 vs 1036     #  153: 1200 vs 1284    #  154: 1100 vs 1036    #  155: 800 vs 1041
#  156: 2400 vs 1064     #  157: 2700 vs 2401    #  158: 2000 vs 1624    #  159: 1600 vs 1036
#  160: 1000 vs 1350     #  161: 800 vs 1036     #  162: 2900 vs 2249    #  163: 2400 vs 2238
#  164: 2200 vs 1582     #  165: 1800 vs 1715    #  166: 1500 vs 1036    #  167: 3500 vs 1959
#  168: 3100 vs 2523     #  169: 2400 vs 2150    #  170: 2100 vs 1479    #  171: 2300 vs 1900
#  172: 1700 vs 1626     #  173: 1400 vs 1515    #  174: 2800 vs 2339    #  175: 2800 vs 2197
#  176: 2800 vs 2336     #  177: 2800 vs 2337    #  178: 2800 vs 2235    #  179: 2800 vs 2330
#  180: 2800 vs 2332     #  181: 2800 vs 2332    #  182: 2800 vs 2248    #  183: 2500 vs 2194
#  184: 2300 vs 2381     #  185: 1700 vs 1768    #  186: 1100 vs 1994    #  187: 800 vs 800
#  188: 1000 vs 1233     #  189: 3500 vs 2495    #  190: 3200 vs 2025    #  191: 2700 vs 1455
#  192: 2300 vs 2056     #  193: 2100 vs 1461    #  194: 1700 vs 1621    #  195: 1500 vs 1783
#  196: 800 vs 1036      #  197: 3500 vs 2250    #  198: 3000 vs 1889    #  199: 2900 vs 1282

Cases: 17788
Average distance: 0.0324
Average error: 454.6

Weights:
[tanh]
2.110            | 4.843            | 7.925
0.350,-2.635,-0.111 | 2.150,1.267,4.072 | -1.065,-1.009,-1.203
-3.226,1.788,0.745
         58597327 function calls (44829408 primitive calls) in 12.134 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
12238144/3059536    1.769    0.000    5.306    0.000 main.py:99(<genexpr>)
4366954/2072302    1.438    0.000    6.179    0.000 main.py:96(calculate)
3806632/1511980    1.356    0.000    6.503    0.000 {built-in method builtins.sum}
 10245888    0.963    0.000    1.513    0.000 main.py:39(calculate)
   747096    0.927    0.000    2.733    0.000 main.py:124(delta)
  5435180    0.810    0.000    1.188    0.000 activators.py:38(result)
       42    0.716    0.017   11.907    0.284 main.py:200(epoch)
  8050016    0.554    0.000    0.554    0.000 {built-in method math.exp}
   764884    0.482    0.000    0.482    0.000 main.py:165(set_inputs)
  1307418    0.345    0.000    0.520    0.000 activators.py:48(derivative)
   560322    0.342    0.000    1.220    0.000 main.py:112(delta_as_not_last)
  2241288    0.319    0.000    0.426    0.000 main.py:114(<genexpr>)
  1903316    0.269    0.000    6.367    0.000 main.py:176(calculate)
   560322    0.262    0.000    0.478    0.000 main.py:55(delta_as_not_last)
   186774    0.241    0.000    4.001    0.000 main.py:187(train)
   560322    0.217    0.000    0.695    0.000 main.py:66(delta)
   373548    0.210    0.000    2.904    0.000 main.py:198(<listcomp>)
   764884    0.183    0.000    0.183    0.000 data_source.py:32(extract_data)
   747054    0.140    0.000    0.205    0.000 random.py:237(_randbelow_with_getrandbits)
   747096    0.136    0.000    0.178    0.000 main.py:106(<genexpr>)
       42    0.099    0.002    0.304    0.007 random.py:348(shuffle)
   764884    0.090    0.000    0.090    0.000 data_source.py:35(wanted)
   186774    0.089    0.000    0.439    0.000 main.py:104(delta_as_last)
   186774    0.052    0.000    0.786    0.000 main.py:192(<listcomp>)
  1068491    0.041    0.000    0.041    0.000 {method 'getrandbits' of '_random.Random' objects}
        1    0.028    0.028   12.133   12.133 main.py:224(main)
   747054    0.024    0.000    0.024    0.000 {method 'bit_length' of 'int' objects}
      258    0.017    0.000    0.017    0.000 {built-in method builtins.print}
        1    0.006    0.006    0.013    0.013 data_source.py:11(__init__)
        1    0.004    0.004    0.004    0.004 decoder.py:343(raw_decode)
        1    0.001    0.001    0.002    0.002 {method 'read' of '_io.TextIOWrapper' objects}
    17788    0.001    0.000    0.001    0.000 {built-in method builtins.abs}
        1    0.001    0.001    0.001    0.001 {built-in method _codecs.charmap_decode}
        1    0.001    0.001   12.134   12.134 <string>:1(<module>)
    17790    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
      8/1    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
      130    0.000    0.000    0.000    0.000 data_source.py:29(cases)
        1    0.000    0.000    0.000    0.000 {method '__exit__' of '_io._IOBase' objects}
        1    0.000    0.000    0.000    0.000 main.py:180(sprintf_weights)
        1    0.000    0.000   12.134   12.134 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {built-in method io.open}
       44    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        3    0.000    0.000    0.000    0.000 main.py:45(sprintf_weights)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.min}
        7    0.000    0.000    0.000    0.000 main.py:25(<listcomp>)
        4    0.000    0.000    0.000    0.000 main.py:181(<genexpr>)
        1    0.000    0.000    0.004    0.004 decoder.py:332(decode)
        1    0.000    0.000    0.000    0.000 main.py:155(__init__)
        1    0.000    0.000    0.000    0.000 random.py:125(seed)
        1    0.000    0.000    0.000    0.000 {function Random.seed at 0x000001FEAF979280}
       10    0.000    0.000    0.000    0.000 main.py:182(<genexpr>)
        1    0.000    0.000    0.007    0.007 __init__.py:274(load)
        7    0.000    0.000    0.000    0.000 main.py:21(generate)
       16    0.000    0.000    0.000    0.000 main.py:147(<genexpr>)
        1    0.000    0.000    0.004    0.004 __init__.py:299(loads)
        2    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
        3    0.000    0.000    0.000    0.000 main.py:33(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method _locale._getdefaultlocale}
        1    0.000    0.000    0.001    0.001 cp1251.py:22(decode)
        4    0.000    0.000    0.000    0.000 main.py:89(__init__)
        2    0.000    0.000    0.000    0.000 main.py:161(<listcomp>)
        1    0.000    0.000    0.000    0.000 main.py:156(<listcomp>)
        4    0.000    0.000    0.000    0.000 main.py:146(sprintf_weights)
       15    0.000    0.000    0.000    0.000 {method 'random' of '_random.Random' objects}
        1    0.000    0.000    0.000    0.000 _bootlocale.py:11(getpreferredencoding)
        3    0.000    0.000    0.000    0.000 {method 'ljust' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        3    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        1    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 activators.py:59(__str__)
